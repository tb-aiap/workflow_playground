name: Continous Integration 

on:
  workflow_dispatch:
  push:
    branches: [ "**" ]
  # pull_request:
  #   branches: [ "**" ]

env:
  uv_version: "0.8.20"

jobs:
#   job1:
#     name: Job 1
#     runs-on: ubuntu-latest

#     steps:
#     - name: Sleep and Run
#       run: |
#         echo "Sleeping for 10"
#         sleep 10

#   job2:
#     name: Job 2
#     runs-on: ubuntu-latest

#     steps:
#     - name: Dependant is Running
#       run: |
#         echo "Completed job 2, but triggering failure"
#         exit 1

#   job3:
#     name: Job 3
#     needs: [job1, job2]
#     runs-on: ubuntu-latest

#     steps:
#     - name: Will never run
#       run: |
#         echo "If you can read this, the experiment failed"k
  check-linting:
    name: Check linting and formating 
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.uv_version }}

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Ruff format check 
        run: |
          set +e
          uv run ruff format src --check
          code=$?
          echo "Exit code $code"
          if [ $code -ne 0 ]; then
            echo "::error::Ruff formatting check failed. Some files not formatted properly."
            exit 1
          fi

      - name: Ruff linting check
        run: uv run ruff check src --output-format=github      

  unit-test: 
    name: Unit test coverage report
    needs: check-linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.uv_version }}

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Run Unit test 
        run: |
          uv run pytest 
      
      - name: Check Min Coverage 
        run: |
          uv add pytest-cov
          uv run coverage report --fail-under=80 